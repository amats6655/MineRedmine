    <script src="~/js/tags.js"></script>
    @using Redmine.Net.Api.Types
    @using System.Text
    @model List<Redmine.Net.Api.Types.Issue>

    <h1 align="center">Мои задачи</h1>
    
    <!-- Кнопка для открытия модального окна -->
    <button type="button" class="filter-popup-btn btn btn-primary" data-bs-target="#filterPopup" data-bs-toggle="modal">
        <img src="images/filter.png" width="40" alt="Filters"/>
    </button>
    <!-- Модальное окно -->
    <div id="filterPopup" class="modal fade" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLablel">Фильтры</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <button class="button" id="all" data-filter="*">all <span class="badge bg-info"> @Model.Count.ToString()</span></button>
                    <div class="dropdown dropend">
                        <button class="button dropdown-toggle filter-btn" type="button" id="statusDropdown" data-bs-toggle="dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Статус</button>
                        <div class="dropdown-menu" aria-labelledby="statusDropdown">
                            <div class="dropdown-item">
                                <label>
                                    <input type="checkbox" class="filter-checkbox d-none" data-group="status" data-filter=".pending"/> В ожидании <span class="badge bg-info">@Model.Count(i => i.Status.Id == 7).ToString()</span>
                                </label>
                            </div>
                            <div class="dropdown-item">
                                <label>
                                    <input type="checkbox" class="filter-checkbox d-none" data-group="status" data-filter=".in-work"/>В работе <span class="badge bg-info">@Model.Count(i => i.Status.Id == 2).ToString()</span>
                                </label>
                            </div>
                            <div class="dropdown-item">
                                <label>
                                    <input type="checkbox" class="filter-checkbox d-none" data-group="status" data-filter=".assigned"/>Назначена <span class="badge bg-info">@Model.Count(i => i.Status.Id == 14).ToString()</span>
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="dropdown dropend">
                        <button class="button dropdown-toggle filter-btn" type="button" id="priorityDropdownButton" data-bs-toggle="dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Приоритет</button>
                        <div class="dropdown-menu" aria-labelledby="priorityDropdown">
                            <div class="dropdown-item">
                                <label>
                                    <input type="checkbox" class="filter-checkbox d-none" data-group="priority" data-filter=".low"/>Низкий <span class="badge bg-info">@Model.Count(i => i.Priority.Id == 1).ToString()</span>
                                </label>
                            </div>
                            <div class="dropdown-item">
                                <label>
                                    <input type="checkbox" class="filter-checkbox d-none" data-group="priority" data-filter=".average"/>Средний <span class="badge bg-info">@Model.Count(i => i.Priority.Id == 2).ToString()</span>
                                </label>
                            </div>
                            <div class="dropdown-item">
                                <label>
                                    <input type="checkbox" class="filter-checkbox d-none" data-group="priority" data-filter=".high">Высокий <span class="badge bg-info">@Model.Count(i => i.Priority.Id == 3).ToString()</span>
                                </label>
                            </div>
                            <div class="dropdown-item">
                                <label>
                                    <input type="checkbox" class="filter-checkbox d-none" data-group="priority" data-filter=".critical">Критический <span class="badge bg-info">@Model.Count(i => i.Priority.Id == 4).ToString()</span>
                                </label>
                            </div>
                        </div>
                    </div>
                    
                        @{
                            var customFieldSettings = ViewData["CustomFieldsSettings"] as Dictionary<string, string>;
                            foreach (var fieldSetting in customFieldSettings)
                            {
                                var customFieldData = ViewData[fieldSetting.Key] as List<IssueCustomField>;
                                <div class="dropdown dropend">
                                    <button class="button dropdown-toggle filter-btn" type="button" data-bs-toggle="dropdown">
                                        @fieldSetting.Value
                                    </button>
                                    <div class="dropdown-menu">
                                        @foreach (var cf in customFieldData)
                                        {
                                            <div class="dropdown-item">
                                                <label>
                                                    <input type="checkbox" class="filter-checkbox d-none" data-group="@fieldSetting.Key" data-filter=".@cf.Values[0].Info">@cf.Values[0].Info
                                                </label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                </div>
            </div>
        </div>
    </div>

    
    <section id="grid-container" class="wrapper transitions-enabled fluid masonry js-masonry grid">
        <div class="container">
            <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-3">
                @foreach (var issue in Model)
                {
                    var color = issue.Priority.Id switch
                    {
                        1 => "#2ad667",
                        2 => "#3a63d9",
                        3 => "#ff333",
                        4 => "#b03a3e",
                        _ => "#000000"
                        };

                    <div class="col @GetTags(issue)">
                        <a href="@Url.Action("Edit", "Issues", new { id = issue.Id })" class="text-white link-underline link-underline-opacity-0">
                            <div class="card text-white">
                                <div class="card-bg" style="background-color: @color">
                                    <div class="card-body">
                                        <small class="card-meta mb-2">@issue.Id.ToString()</small>
                                        <h6 class="card-title mt-0 text-uppercase">@issue.Subject</h6>
                                    </div>
                                    <div class="card-footer h-100">
                                        <dl class="row">
                                            <dt class="small col-6 text-truncate">Местоположение:</dt>
                                            <dd class="small col-6 text-truncate"><small>@GetLocation(issue)</small></dd>
                                            <dt class="small col-6 text-truncate">Заявитель:</dt>
                                            <dd class="small col-6 text-truncate">@issue.Author.Name</dd>
                                            <dt class="small col-6 text-truncate">Назначена:</dt>
                                            <dd class="small col-6 text-truncate">@issue.AssignedTo.Name</dd>
                                            <dt class="small col-6 text-truncate">Статус:</dt>
                                            <dd class="small col-6 text-truncate">@issue.Status.Name</dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>
        </div>
    </section>

@functions{
    private string GetTags(Issue issue)
    {
        var result = new StringBuilder();
        var customFieldSettings = ViewData["CustomFieldsSettings"] as Dictionary<string, string>;
        foreach (var fieldSetting in customFieldSettings)
        {
            var customFieldData = ViewData[fieldSetting.Key] as List<IssueCustomField>;
            foreach (var caf in issue.CustomFields)
            {
                if(!caf.Name.Equals(fieldSetting.Value)) continue;
                result.Append($" {caf.Values[0].Info}");
                break;
            }
        }

        var status = issue.Status.Id switch
        {
            2 => "in-work",
            7 => "pending",
            14 => "assigned",
            _ => ""
            };
        var priority = issue.Priority.Id switch{
            2 => "average",
            3 => "high",
            4 => "critical",
            _ => "low"
            };
        result.Append($" {status} {priority}");

        return result.ToString();
    }
    private string GetLocation(Issue issue)
    {
        var location = "Не указано";
        foreach (var t in issue.CustomFields)
        {
            if (!t.Name.Equals("Местоположение")) continue;
            location = t.Values[0].Info;
            break;
        }
        
        return location;
    }

}

