    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
    <script src="~/js/isotope.pkgd.min.js"></script>
    <script src="~/js/tags.js"></script>
    <style>
        .hidden{display: none;}
    </style>
    @using Redmine.Net.Api.Types
    @model List<Redmine.Net.Api.Types.Issue>

    <h1 align="center">Мои задачи</h1>
        <div class="button-group filters-button-group">
            <button class="button is-checked" id="all" data-filter="*">all <span class="bg-info text-white rounded-circle px-2 py-1 mx-2">@Model.Count.ToString()</span></button>
            <button class="button filter-btn" id="status">Статус</button>
            <button class="button filter-btn" id="priority">Приоритет</button>
            <button class="button filter-btn" id="building">Объект</button>
            
            @foreach (var building in GetUniqueBuildings())
            {
                <button class="button hidden building" data-filter=".@building.Values[0].Info">@building.Values[0].Info</button>
            }
            <button class="button hidden status" data-filter=".pending">В ожидании <span class="bg-info text-white rounded-circle px-2 py-1 mx-2">@Model.Count(i => i.Status.Id == 7).ToString()</span></button>
            <button class="button hidden status" data-filter=".in-work">В работе <span class="bg-info text-white rounded-circle px-2 py-1 mx-2">@Model.Count(i => i.Status.Id == 2).ToString()</span></button>
            <button class="button hidden status" data-filter=".assigned">Назначена <span class="bg-info text-white rounded-circle px-2 py-1 mx-2">@Model.Count(i => i.Status.Id == 14).ToString()</span></button>
            <button class="button hidden priority" data-filter=".average">Средний приоритет <span class="bg-info text-white rounded-circle px-2 py-1 mx-2">@Model.Count(i => i.Priority.Id == 2).ToString()</span></button>
            <button class="button hidden priority" data-filter=".high">Высокий приоритет <span class="bg-info text-white rounded-circle px-2 py-1 mx-2">@Model.Count(i => i.Priority.Id == 3).ToString()</span></button>
            <button class="button hidden priority" data-filter=".critical">Критический приоритет <span class="bg-info text-white rounded-circle px-2 py-1 mx-2">@Model.Count(i => i.Priority.Id == 4).ToString()</span></button>
            <button class="button hidden priority" data-filter=".low">Низкий приоритет <span class="bg-info text-white rounded-circle px-2 py-1 mx-2">@Model.Count(i => i.Priority.Id == 1).ToString()</span></button>
        </div>
    

    <section id="grid-container" class="wrapper transitions-enabled fluid masonry js-masonry grid">
        <div class="container">
            <div class="row ">
                @foreach (var issue in Model)
                {
                    var color = issue.Priority.Id switch
                    {
                        1 => "#23ec55",
                        2 => "#2d51c1",
                        3 => "#FF0000",
                        4 => "#9b2d30",
                        _ => "#000000"
                        };

                    <article class="col-12 col-md-6 col-lg-4 mb-4 @GetTags(issue)">
                        <a href="@Url.Action("Edit", "Issues", new { id = issue.Id })" class="text-white">
                            <div class="card text-white card-has-bg click-col">
                                <div class="card-img-overlay d-flex flex-column" style="background-color: @color">
                                    <div class="card-body">
                                        <small class="card-meta mb-2">@issue.Id.ToString()</small>
                                        <h6 class="card-title mt-0">@issue.Subject</h6>
                                        <small><i class="far fa-clock"></i>@issue.AssignedTo.Name</small>
                                    </div>
                                    <div class="card-footer d-flex justify-content-between">
                                        <div class="align-self-start">
                                            <h6 class="my-0 text-white d-block">Заявитель</h6>
                                            <small>@issue.Author.Name</small>
                                        </div>
                                        <div class="align-self-end">
                                            <h6 class="my-0 text-white d-block">Статус</h6>
                                            <small>@issue.Status.Name</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </article>
                }
            </div>
        </div>
    </section>

@functions{

    private List<IssueCustomField> GetUniqueBuildings()
    {
        List<IssueCustomField> buildings = new List<IssueCustomField>();
        foreach (var issue in Model)
        {
            List<IssueCustomField> customFields = issue.CustomFields.ToList();
            foreach (var cs in customFields)
            {
                if(!cs.Name.Equals("Объект Фонда")) continue;
                buildings.Add(cs);
            }
        }
        return buildings.Distinct().ToList();
    }
    
    private string GetTags(Issue issue)
    {
        var building = "Нема";
        foreach (var cf in issue.CustomFields)
        {
            if(!cf.Name.Equals("Объект Фонда")) continue;
            building = cf.Values[0].Info.ToString();
            break;
        }
        var status = issue.Status.Id switch
        {
            2 => "in-work",
            7 => "pending",
            14 => "assigned",
            _ => ""
            };
        var priority = issue.Priority.Id switch{
            2 => "average",
            3 => "high",
            4 => "critical",
            _ => "low"
            };
        var result = $"{status} {priority} {building}";
        
        return result;
    }

}
    }
    