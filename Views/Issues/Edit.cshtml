@using Redmine.Net.Api.Types
@using Microsoft.VisualBasic.CompilerServices
@model Redmine.Net.Api.Types.Issue

<!-- Кнопка для открытия модального окна -->
<button type="button" class="comment-popup-btn comment-btn btn btn-primary" data-bs-toggle="modal" data-bs-target="#commentPopup" data-issue-id="@Model.Id" data-url="@Url.Action("AddComment", "Issues")">
    <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" fill="currentColor" class="bi bi-chat-right-fill" viewBox="0 0 16 16">
      <path d="M14 0a2 2 0 0 1 2 2v12.793a.5.5 0 0 1-.854.353l-2.853-2.853a1 1 0 0 0-.707-.293H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12z"/>
    </svg>
</button> 

<!-- Модальное окно -->
<div class="modal fade" id="commentPopup" tabindex="-1" aria-labelledby="commentPopupLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="commentPopupLabel">Добавить комментарий</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="commentForm" novalidate>
                    <div class="mb-3">
                        <label for="commentText" class="form-label">Комментарий</label>
                        <textarea class="form-control" id="commentText" rows="3" required></textarea>
                        <div class="invalid-feedback">Пожалуйста, введите комментарий.</div>
                    </div>
                    <div class="mb-3">
                        <label for="commentFile" class="form-label">Добавить вложение (макс. 5 МБ)</label>
                        <input class="form-control" type="file" id="commentFile">
                        <div class="invalid-feedback">Размер файла превышает 5 МБ.</div>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="privateComment">
                        <label class="form-check-label" for="privateComment">Приватный комментарий</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <div id="loadingSpinner" class="spinner-border text-primary" role="status" style="display: none;">
                    <span class="sr-only">Загрузка...</span>
                </div>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                <button type="submit" class="btn btn-primary" form="commentForm">Отправить</button>
            </div>
        </div>
    </div>
</div>



<h2 class="text-center">@Model.Subject</h2>
<hr/>
<section class="wrapper">
    <div class="container">
        <div class="detail bg-light mb-3" style="box-shadow: 0 0 10px 2px @GetStatusColor();">
            <div class="card-body">
                <dl class="row">
                    <dt class="col-sm-3 col-5">ID:</dt>
                    <dd class="col-sm-3 col-7">@Model.Id.ToString()</dd>
                    
                    <dt class="col-sm-3 col-5">Создано:</dt>
                    <dd class="col-sm-3 col-7 text-truncate">@Model.CreatedOn.ToString()</dd>      
                    
                    <dt class="col-sm-3 col-5">Объект:</dt>
                    <dd class="col-sm-3 col-7">@GetBuilding()</dd>
                    
                    <dt class="col-sm-3 col-5">Местоположение:</dt>
                    <dd class="col-sm-3 col-7">@GetLocation()</dd>

                    <dt class="col-sm-3 col-5">Приоритет:</dt>
                    <dd class="col-sm-3 col-7">@Model.Priority.Name</dd>
                    
                    <dt class="col-sm-3 col-5">Заявитель:</dt>
                    <dd class="col-sm-3 col-7">@Model.Author.Name</dd>

                    <dt class="col-sm-3 col-5">Телефон:</dt>
                    <dd class="col-sm-3 col-7"><a href="tel:@GetPhoneNumber()">@GetPhoneNumber()</a></dd>
                    
                    <dt class="col-sm-3 col-5">Назначена:</dt>
                    <dd class="col-sm-3 col-7">@Model.AssignedTo.Name</dd>
                </dl>

                <span> @Html.Raw(Model.Description)</span>
            </div>
        </div>
        <div class="take-issue-btn" style="" align="center">
            <form action="@Url.Action("TakeIssue", "Issues", new { id = Model.Id })" method="post">
                <button type="submit" class="custom-button">В работу</button>
            </form>
        </div>
    </div>
</section>
<script src="~/js/addComment.js"></script>

@foreach (var t in Model.Journals)
{
    @if (!string.IsNullOrEmpty(t.Notes))
    {
        <blockquote class="speech-bubble">
          <p>@Html.Raw(t.Notes)</p>
            <cite>@t.User.Name / @t.CreatedOn.ToString()</cite>
        </blockquote>
    }
}
<br/><br/>

@functions{

    private string GetStatusColor()
    {
        var color = Model.Priority.Id switch
        {
            1 => "#2ad667",
            2 => "#3a63d9",
            3 => "#ff333",
            4 => "#b03a3e",
            _ => "#000000"
            };
        return color;
    }
    
    private string GetPhoneNumber()
    {
        var phone = "Не указан";
        foreach (var t in Model.CustomFields)
        {
            if (!t.Name.Equals("Телефон для связи")) continue;
            phone = t.Values[0].Info;
            break;
        }
        
        return phone;
    }
    private string GetLocation()
    {
        var location = "Не указано";
        foreach (var t in Model.CustomFields)
        {
            if (!t.Name.Equals("Местоположение")) continue;
            location = t.Values[0].Info;
            break;
        }
        
        return location;
    }

    private string GetBuilding()
    {
        var building = "Неизвестно";
        var customFieldSettings = ViewData["CustomFieldsSettings"] as Dictionary<string, string>;
        var customFieldNames = ViewData["CustomFieldNames"] as Dictionary<string, Dictionary<int, string>>;
        foreach (var cf in Model.CustomFields)
        {
            if (!cf.Name.Equals(customFieldSettings["Buildings"])) continue;
            foreach (var cfn in customFieldNames["Buildings"])
            {
                if (cfn.Key == int.Parse(cf.Values[0].Info))
                {
                    building = cfn.Value;
                    break;
                }
            }
            
        }
        return building;
    }
}

